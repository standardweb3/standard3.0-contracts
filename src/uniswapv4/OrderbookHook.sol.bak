// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.0;

import {BaseHook} from "periphery-next/BaseHook.sol";
import {ERC1155} from "openzeppelin-src/src/token/ERC1155/ERC1155.sol";
import {IPoolManager} from "v4-core/interfaces/IPoolManager.sol";
import {Hooks} from "v4-core/libraries/Hooks.sol";
import {PoolId, PoolIdLibrary} from "v4-core/types/PoolId.sol";
import {Currency, CurrencyLibrary} from "v4-core/types/Currency.sol";
import {PoolKey} from "v4-core/types/PoolKey.sol";
import {IERC20} from "openzeppelin-src/src/token/ERC20/IERC20.sol";
import {TickMath} from "v4-core/libraries/TickMath.sol";
import {BalanceDelta} from "v4-core/types/BalanceDelta.sol";
import {FixedPointMathLib} from "solmate/utils/FixedPointMathLib.sol";
import {IEngine} from "../../src/exchange/interfaces/IEngine.sol";

contract OrderbookHook is BaseHook, ERC1155 {
    // Use the PoolIdLibrary for PoolKey to add the `.toId()` function on a PoolKey
    // which hashes the PoolKey struct into a bytes32 value
    using PoolIdLibrary for PoolKey;

    // Use the CurrencyLibrary for the Currency struct
    using CurrencyLibrary for Currency;

    // Use the FixedPointMathLib for doing math operations on uint256 values
    using FixedPointMathLib for uint256;

    // add matching engine address
    address public matchingEngine;

    // Create a mapping to store the last known tickLower value for a given Pool
    mapping(PoolId poolId => int24 tickLower) public tickLowerLasts;

    // Create a nested mapping to store the take-profit orders placed by users
    // The mapping is PoolId => tickLower => zeroForOne => amount
    // PoolId => (...) specifies the ID of the pool the order is for
    // tickLower => (...) specifies the tickLower value of the order i.e. sell when price is greater than or equal to this tick
    // zeroForOne => (...) specifies whether the order is swapping Token 0 for Token 1 (true), or vice versa (false)
    // amount specifies the amount of the token being sold
    mapping(PoolId poolId => mapping(int24 tick => mapping(bool zeroForOne => int256 amount)))
        public takeProfitPositions;

    // tokenIdExists is a mapping to store whether a given tokenId (i.e. a take-profit order) exists given a token id
    mapping(uint256 tokenId => bool exists) public tokenIdExists;
    // tokenIdClaimable is a mapping that stores how many swapped tokens are claimable for a given tokenId
    mapping(uint256 tokenId => uint256 claimable) public tokenIdClaimable;
    // tokenIdTotalSupply is a mapping that stores how many tokens need to be sold to execute the take-profit order
    mapping(uint256 tokenId => uint256 supply) public tokenIdTotalSupply;
    // tokenIdData is a mapping that stores the PoolKey, tickLower, and zeroForOne values for a given tokenId
    mapping(uint256 tokenId => TokenData) public tokenIdData;

    struct TokenData {
        PoolKey poolKey;
        int24 tick;
        bool zeroForOne;
    }

    // Initialize BaseHook and ERC1155 parent src in the constructor
    constructor(
        IPoolManager _poolManager,
        string memory _uri,
        address _matchingEngine
    ) BaseHook(_poolManager) ERC1155(_uri) {
        matchingEngine = _matchingEngine;
    }

    // Required override function for BaseHook to let the PoolManager know which hooks are implemented
    function getHooksCalls() public pure override returns (Hooks.Calls memory) {
        return
            Hooks.Calls({
                beforeInitialize: false,
                afterInitialize: true,
                beforeModifyPosition: false,
                afterModifyPosition: false,
                beforeSwap: false,
                afterSwap: true,
                beforeDonate: false,
                afterDonate: false
            });
    }

    // Hooks
    function afterInitialize(
        address,
        PoolKey calldata key,
        uint160,
        int24 tick
    ) external view poolManagerOnly returns (bytes4) {
        return OrderbookHook.afterInitialize.selector;
    }

    function afterSwap(
        address,
        PoolKey calldata key,
        IPoolManager.SwapParams calldata params,
        BalanceDelta
    ) external poolManagerOnly returns (bytes4) {
        // find out base and quote with buy/sell option
        bool zeroForOne = params.zeroForOne;
        address base;
        address quote;
        if(zeroForOne) {
            // if buy, then base is quote and quote is base
            base = Currency.unwrap(key.currency1);
            quote = Currency.unwrap(key.currency0);
            // turn price from param into 8 decimal uint256
            uint256 price = FixedPointMathLib.mulDivDown(params.sqrtPriceLimitX96, params.sqrtPriceLimitX96, 2**96);
            IEngine(matchingEngine).limitBuy(
                base,
                quote,
                price,
                uint256(params.amountSpecified),
                true,
                3,
                0
            );
        } else {
            // if sell, then base is base and quote is quote
            base = Currency.unwrap(key.currency0);
            quote = Currency.unwrap(key.currency1);
            // turn price from param into 8 decimal uint256
            uint256 price = FixedPointMathLib.mulDivDown(params.sqrtPriceLimitX96, params.sqrtPriceLimitX96, 2**96);
            IEngine(matchingEngine).limitSell(
                base,
                quote,
                price,
                uint256(params.amountSpecified),
                true,
                3,
                0
            );
        }

        return OrderbookHook.afterSwap.selector;
    }
}